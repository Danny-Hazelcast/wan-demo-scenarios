#!/usr/bin/env bash
set -e

hzVersion=${1:-$(hazelcastVersion)}

#creating the ec2 instances in files a b and c
#a.box is just a list of ip addresses. each line has the format --> public,preivate,instanceID
aws-create --count 2 --region us-west-1 --imageId ami-02e51256b01eaa9ef --subnetId subnet-9fa278c6 --key jenkins-ec2-key --outputFile a.box
aws-create --count 2 --region us-east-1 --outputFile b.box
aws-create --count 2 --region us-east-2 --imageId ami-093cbcaab778edd5e --subnetId subnet-0467850a244253773 --key jenkins-ec2-key-east-2 --outputFile c.box

#these are member and client jvm option which will be passed to the remote jvm running on the ec2 instances
#we are using EE jars so we set the license key.
hzProps="${hzProps} -Dhazelcast.enterprise.license.key=${HAZELCAST_EE_KEY} -Dhazelcast.backpressure.enabled=true"
hzProps="${hzProps} -Dlog4j.configuration=file:./log4j.properties -Dhazelcast.logging.type=log4j"
hz memberOps "-Xms3G -Xmx3G ${hzProps}"
hz clientOps "-Xms200M -Xmx400M ${hzProps}"

hz cluster -id A -tag AA  -size M2C2 -v ${hzVersion} -ee -boxes a.box -user ec2-user -upcwd log4j.properties
hz cluster -id B -tag BB  -size M2C2 -v ${hzVersion} -ee -boxes b.box -user ec2-user -upcwd log4j.properties
hz cluster -id C -tag CC  -size M2C2 -v ${hzVersion} -ee -boxes c.box -user ec2-user -upcwd log4j.properties


#setting up the wan replication between clusters.
#this sets up a active active wan replication between all 3 clusters. as in the diagram below.
# A - B
#  \ /
#   C
#we are using the cluster ID  A replication to B and C
hz wan A B C
hz wan B A C
hz wan C A B

#for the new wan configuration to take effect the cluster must be bounced "restarted" and the new xml config will be used
hz bounce Member

until hz run untilClusterSafe; do
  sleep 10
done

#hear we run load on cluster A.  each member of cluster A which are "drivers"  put 1000 items into the maps and caches
#see the file load
hz run -id A load

#hear we sleep a littel to wait for wan replication to fill the structs on the other caches.
sleep 15

#hear we run validate on all member of all clusters, to check the data is replicated as expected.
hz run validate

#we clea the data from all structs in all Clusters.
hz run clear
hz run validateZero


#create a network split, blocking TCP coms IN and OUT  between AA and BB  and AA and CC, so AA is isolated
#hear we are using the tag name AA split from BB and CC
hz split AA BB CC

#we make the same load on cluster A
hz run -id A load
hz run -id A validate
sleep 15

#hear we expect that the structs in BB and CC are empty, as wan replication can not happen
hz run -id B validateZero
hz run -id C validateZero

#heal the network back to normal state.
hz heal

#set the duration for the next tasks to be run.
hz duration 40

#run put operation from all members and all client in all clusters
#we run this in the background with &,  which allows the script to continue.
hz run put &

#stop the put operation that are running on the clusters
hz stop
wait

#wait for wan queue to be cleared after all there puts
sleep 60
#another quick clear and load, just to check replication is still working after the split heal cycle.
hz run clear
hz run validateZero

hz run -id A load
sleep 15
hz run validate

